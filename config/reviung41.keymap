/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define LCK 4

#define MSSFULL LS(LG(N3)) // macOS screenshot, fullscreen  (Shift+Command+3)
#define MSSAREA LS(LG(N4)) // macOS screenshot, area        (Shift+Command+4)
#define MSSAPP  LS(LG(N5)) // macOS screenshot, application (Shift+Command+5)

/ {
        behaviors {
                rgb_ar: rgb_ug_auto_repeat_behavior {
                        compatible = "zmk,behavior-auto-repeat";
                        label = "RGB_AR";
                        #binding-cells = <2>;
                        bindings = <&rgb_ug>;
                        initial-delay-ms = <400>;
                        repeat-delay-ms = <200>;
                };
                // kp_ar: kp_auto_repeat_behavior {
                //         compatible = "zmk,behavior-auto-repeat";
                //         label = "KP_AR";
                //         #binding-cells = <1>;
                //         bindings = <&kp>;
                // };
        };

        multi_layers {
                compatible = "zmk,multi-layers";
                tri_layer {
                        if-layers = <LWR RSE>;
                        then-layer = <ADJ>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &kp TAB      &kp Q     &kp W     &kp E     &kp R     &kp T              &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
   &mt LALT ESC &kp A     &kp S     &kp D     &kp F     &kp G              &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
   &kp LCTRL    &kp Z     &kp X     &kp C     &kp V     &kp B              &kp N     &kp M     &kp COMMA &kp DOT   &kp FSLH  &kp RET
                                              &kp LGUI  &mo LWR &kp SPACE  &mo RSE   &kp RSHFT
                        >;
                };

                lower_layer {
                        bindings = <
   &kp GRAVE    &kp N1    &kp N2    &kp N3    &kp N4    &kp N5             &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &kp DEL
   &trans       &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT  &kp BSLH           &kp F1    &kp F2    &kp F3    &kp F4    &kp F5    &kp F6
   &trans       &kp ESC   &kp LGUI  &kp LALT  &kp CLCK  &none              &kp F7    &kp F8    &kp F9    &kp F10   &kp F11   &kp F12
                                              &trans    &trans   &trans    &trans    &trans
                        >;
                };

                raise_layer {
                        bindings = <
   &kp TILDE    &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT          &kp CARET &kp AMPS  &kp ASTRK &kp LPAR  &kp RPAR  &kp DEL
   &trans       &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC  &kp PIPE           &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &none     &none
   &trans       &kp ESC   &kp RGUI  &kp RALT  &kp CLCK  &none              &kp HOME  &kp END   &kp PG_UP &kp PG_DN &kp PSCRN &trans
                                              &trans    &trans   &trans    &trans    &trans
                        >;
                };

                adjust_layer {
                        bindings = <
   &rgb_ar RGB_BRI &rgb_ar RGB_SAI &rgb_ar RGB_HUI &rgb_ug RGB_EFF &rgb_ar RGB_SPI &rgb_ug RGB_TOG               &ext_power EP_TOG &kp C_VOL_DN    &kp C_MUTE      &kp C_VOL_UP    &kp C_BRI_DN    &kp C_BRI_UP
   &rgb_ar RGB_BRD &rgb_ar RGB_SAD &rgb_ar RGB_HUD &rgb_ug RGB_EFR &rgb_ar RGB_SPD &none                           &none           &kp C_PREV      &kp C_PP        &kp C_NEXT      &none           &bootloader
   &trans          &none           &none           &kp MSSFULL     &kp MSSAREA     &kp MSSAPP                      &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &bt BT_CLR
                                                                   &trans          &trans          &tog LCK        &trans          &trans
                        >;
                };

                lock_layer {
                        bindings = <
   &none        &none     &none     &none     &none     &none              &none     &none     &none     &none     &none     &none
   &none        &none     &none     &none     &none     &none              &none     &none     &none     &none     &none     &none
   &none        &none     &none     &none     &none     &none              &none     &none     &none     &none     &none     &none
                                              &none     &none    &none     &none     &none
                        >;
                };
        };

        combos {
                compatible = "zmk,combos";
                combo_unlock {
                        timeout-ms = <50>;
                        key-positions = <37 38 39>;
                        bindings = <&tog LCK>;
                        layers = <LCK>;
                };
        };
};

&spi1 {
	compatible = "nordic,nrf-spim";
	status = "okay";
	mosi-pin = <6>;
	// Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.
	sck-pin = <5>;
	miso-pin = <7>;

	led_strip: ws2812@0 {
		compatible = "worldsemi,ws2812-spi";
		label = "WS2812";

		/* SPI */
		reg = <0>; /* ignored, but necessary for SPI bindings */
		spi-max-frequency = <4000000>;

		/* WS2812 */
		chain-length = <10>; /* arbitrary; change at will */
		spi-one-frame = <0x70>;
		spi-zero-frame = <0x40>;
	};
};

/ {
	chosen {
		zmk,underglow = &led_strip;
	};
};
