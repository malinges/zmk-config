/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

#define MSSFULL LS(LG(N3)) // macOS screenshot, fullscreen  (Shift+Command+3)
#define MSSAREA LS(LG(N4)) // macOS screenshot, area        (Shift+Command+4)
#define MSSAPP  LS(LG(N5)) // macOS screenshot, application (Shift+Command+5)

&led_strip {
        chain-length = <10>;
};

&soft_off {
        hold-time-ms = <1000>;
};

&sk {
        quick-release;
};

/ {
        behaviors {
                mctl_td: multimedia_controls_tap_dance {
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp C_PP>, <&kp C_NEXT>, <&kp C_PREV>;
                };

                shft_td: shift_tap_dance {
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&sk RSHFT>, <&caps_word>;
                };

                hrm: home_row_mods {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        flavor = "balanced";
                        tapping-term-ms = <200>;
                        quick-tap-ms = <200>;
                        require-prior-idle-ms = <125>;
                        bindings = <&kp>, <&kp>;
                };

                tpht: tap_preferred_hold_tap {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        flavor = "tap-preferred";
                        tapping-term-ms = <200>;
                        quick-tap-ms = <200>;
                        bindings = <&kp>, <&kp>;
                };

                // rgb_ar: rgb_ug_auto_repeat_behavior {
                //         compatible = "zmk,behavior-auto-repeat";
                //         label = "RGB_AR";
                //         #binding-cells = <2>;
                //         bindings = <&rgb_ug>;
                //         initial-delay-ms = <400>;
                //         repeat-delay-ms = <200>;
                // };
                // kp_ar: kp_auto_repeat_behavior {
                //         compatible = "zmk,behavior-auto-repeat";
                //         label = "KP_AR";
                //         #binding-cells = <1>;
                //         bindings = <&kp>;
                // };
        };

        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                        if-layers = <LWR RSE>;
                        then-layer = <ADJ>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
&kp TAB         &kp Q           &kp W           &kp E           &kp R           &kp T                           &kp Y           &kp U           &kp I           &kp O           &kp P           &kp BSPC
&tpht CLCK ESC  &hrm LALT A     &hrm LCTRL S    &hrm LSHFT D    &hrm LGUI F     &kp G                           &kp H           &hrm RGUI J     &hrm RSHFT K    &hrm RCTRL L    &hrm RALT SEMI  &kp SQT
&kp LCTRL       &kp Z           &kp X           &kp C           &kp V           &kp B                           &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH        &kp RET
                                                                &kp LGUI        &mo LWR         &kp SPACE       &mo RSE         &shft_td
                        >;
                };

                lower_layer {
                        bindings = <
&kp GRAVE       &kp N1          &kp N2          &kp N3          &kp N4          &kp N5                          &kp N6          &kp N7          &kp N8          &kp N9          &kp N0          &kp DEL
&trans          &kp MINUS       &kp EQUAL       &kp LBKT        &kp RBKT        &kp BSLH                        &kp F1          &kp F2          &kp F3          &kp F4          &kp F5          &kp F6
&trans          &none           &none           &none           &none           &mctl_td                        &kp F7          &kp F8          &kp F9          &kp F10         &kp F11         &kp F12
                                                                &trans          &trans          &trans          &trans          &trans
                        >;
                };

                raise_layer {
                        bindings = <
&kp TILDE       &kp EXCL        &kp AT          &kp HASH        &kp DLLR        &kp PRCNT                       &kp CARET       &kp AMPS        &kp ASTRK       &kp LPAR        &kp RPAR        &kp DEL
&trans          &kp UNDER       &kp PLUS        &kp LBRC        &kp RBRC        &kp PIPE                        &kp LEFT        &kp UP          &kp DOWN        &kp RIGHT       &none           &none
&trans          &none           &none           &none           &none           &none                           &kp HOME        &kp END         &kp PG_UP       &kp PG_DN       &kp PSCRN       &trans
                                                                &trans          &trans          &trans          &trans          &trans
                        >;
                };

                adjust_layer {
                        bindings = <
&rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_EFF &rgb_ug RGB_SPI &rgb_ug RGB_TOG               &ext_power EP_TOG &kp C_VOL_DN    &kp C_MUTE      &kp C_VOL_UP    &kp C_BRI_DN    &kp C_BRI_UP
&rgb_ug RGB_BRD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_EFR &rgb_ug RGB_SPD &none                           &none           &kp C_PREV      &kp C_PP        &kp C_NEXT      &none           &bootloader
&trans          &none           &none           &kp MSSFULL     &kp MSSAREA     &kp MSSAPP                      &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &bt BT_CLR
                                                                &trans          &trans          &soft_off       &trans          &trans
                        >;
                };
        };
};
